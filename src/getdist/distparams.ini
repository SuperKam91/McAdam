#Params for "getdist" - for processing .txt chain information

#if zero, columnnum calculated automatically as total number of columns
columnnum = 0
file_root = ./BL
out_root = BL
out_dir = ./
plot_data_dir = ./

#If generated chain at higher temperature can cool for computing results
cool = 1

#If 0 assume 1 and no chain filename prefixes
chain_num = 0
first_chain = 
exclude_chain = 

#width of Gaussian smoothing - Should check plots are robust to changes in 
#this parameter. Narrow diagonal distributions need larger number
#Can also check plots by comparing with setting smoothing=F below
num_bins = 30

#For disgarding burn-in if using raw chains
#if < 1 interpreted as a fraction of the total number of rows (0.3 ignores first 30% of lines)
ignore_rows = 0

#if T produced B&W printer friendly output
B&W = F
#version of MatLab you are using
matlab_version = 7

#Switches; auto_label labels all parameters by their number
no_plots = F
no_tests = F
auto_label = F
#samples_are_chains = F can be useful for other samples when first two columns not present
samples_are_chains = T

#Include these in 1D plots for comparison - must have same parameters
compare_num = 0
compare1 = basic6_cmb

plot_meanlikes = F
shade_meanlikes = F

# if non-zero, output _thin file, thinned by thin_factor
thin_factor = 0
#Do probabilistic importance sampling to single samples
make_single_samples = F
single_thin = 4

#Do simple importance sampling
adjust_priors = F
#Map parameters to other derived quantities
map_params = F

#Use a Gaussian smoothing with width of the bin size
#Otherwise use top hat bins
smoothing = T

contour1 = 0.68
contour2 = 0.95

#if we only want 2D plots agains a particular variable
plot_2D_param = 0

#if above zero, instead plot just these combinations:
#if both zero it will plot most correlated variables
plot_2D_num = 0
#plot1 = 9 10
#plot2 = 13 14

#number of sample plots, colored by third parameter
#if last parameter is 0 or -1 colored by the parameter most correlated
#with one of the eigenvector directions (e.g. parallel or orthogonal to degeneracy)
num_3D_plots = 1
3D_plot1 = 1 2 3

#Output 2D plots for param combos with 1D marginalized plots along the diagonal
triangle_plot = T

#Number of parameters to get covariance matrix for 
#If you are going to use the output as a proposal density make sure
#you have map_params = F, and the dimension equal to the number of MCMC parameters
cov_matrix_dimension = 1

#e.g. colormap('jet')
matlab_colscheme =

#Parameters to use. If zero use all parameters which have lables.
plotparams_num = 0
plotparams = 1 2 3 11

#labels for the parameters
lab1 = x_0/arcsec
lab2 = y_0/arcsec
lab3 = r_{core}/h^{-1}kpc
lab4 = \beta
lab5 = M_{gas}/h^{-2}M_{Sun}
lab6 = T/keV
#lab7 = x_1/degrees
#lab8 = y_1/degrees
#lab7 = S_1/Jy
#lab8 = \alpha_1
#lab11 = x_2/degrees
#lab12 = y_2/degrees
#lab9 = S_2/Jy
#lab10 = \alpha_2
#lab15 = x_3/degrees
#lab16 = y_3/degrees
#lab11 = S_3/Jy
#lab12 = \alpha_3

#Need to give limits if prior cuts off distribution where not very small
limits3 = 10 N
limits4 = 0.3 1.5
#limits10 = -1 2.5
#limits14 = -1 2.5
#limits6 = 0 20

#all_limits sets all limitsxx for all variables to the same; can be useful for bins
all_limits = 

#compute two-tail marginalized limits irrespective of limits settings above
#(otherwise limits are two-tail only for those parameters without limits)
force_twotail = F

#PCA - analysis output in file file_root.PCA
#number of parameter to do PCA for
PCA_num = 0
PCA_normparam = 0
#The parameters to use
PCA_params = 3 13 16
#L for log(x), M for log(-x), N for no log
PCA_func   = LLLL
